# Derived from templates/managed-ec2-linux-v2.j2 (v0.2.13)
# in https://github.com/Sage-Bionetworks/aws-infra/
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Provision EC2 instance.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: ""
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.micro
  VpcSubnet:
    Description: Name of an existing VPC subnet to run the instance in.
    Type: String
    Default: PrivateSubnet
    ConstraintDescription: >-
      Allowed values (PrivateSubnet, PrivateSubnet1, PrivateSubnet2, PublicSubnet, PublicSubnet1, PublicSubnet2)
    AllowedValues:
      - PrivateSubnet
      - PrivateSubnet1
      - PrivateSubnet2
      - PublicSubnet
      - PublicSubnet1
      - PublicSubnet2
  VpcName:
    Description: 'Name of an existing VPC to run the instance in'
    Type: String
    Default: sandcastlevpc
  Department:
    Description: 'The department for this resource'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  Project:
    Description: 'The name of the project that this resource is used for'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  OwnerEmail:
    Description: 'Email address of the owner of this resource'
    Type: String
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: 'Must be an acceptable email address syntax(i.e. joe.smith@sagebase.org)'
  EncryptVolume:
    Type: String
    Description: true to encrypt root volume, false (default) for no encryption
    AllowedValues:
      - true
      - false
    Default: true
    ConstraintDescription: 'Must be true or false'
  AMIId:
    Description: ID of the AMI to deploy
    Type: 'AWS::EC2::Image::Id'
  VolumeSize:
    Description: The EC2 volume size (in GB)
    Type: Number
    Default: 8
    MinValue: 8
    MaxValue: 2000
Conditions:
  PublicEc2Resources: !Or [!Equals [ !Ref VpcSubnet, PublicSubnet ], !Equals [ !Ref VpcSubnet, PublicSubnet1 ], !Equals [ !Ref VpcSubnet, PublicSubnet2 ] ]
  HasKeyName: !Not [!Equals ["", !Ref KeyName]]
  EnableEc2Backup: !Equals [!Ref BackupEc2, true]
Resources:
  # TagRoot* resources derived from templates/essentials.yaml (v0.2.13)
  # in https://github.com/Sage-Bionetworks/aws-infra/
  # Allow instances to apply tags to anything and deny write to TagKeys like "Protected/*" except by self
  TagRootVolumePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: TagInstanceVolume
            Effect: Allow
            Action:
              - "ec2:Describe*"
              - "ec2:CreateTags"
            Resource: "*"
          - Sid: DenyWriteProtectedPath
            Effect: Deny
            Action:
              - "ec2:CreateTags"
            Resource: "*"
            Condition:
              StringNotEquals:
                "aws:ARN": "${ec2:SourceInstanceARN}"
              ForAnyValue:StringLike:
                "aws:TagKeys":
                  - "Protected/*" #this can be a list of paths to protect
  TagRootVolumeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref TagRootVolumePolicy
  TagRootVolumeProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: "/"
      Roles:
        - !Ref TagRootVolumeRole
  {% if sceptre_user_data.OpenPorts is defined %}
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: "Open a port for incoming traffic"
      VpcId: !ImportValue
        'Fn::Sub': '${AWS::Region}-${VpcName}-VPCId'
      SecurityGroupIngress:
      {% for port in sceptre_user_data.OpenPorts %}
        - CidrIp: "0.0.0.0/0"
          FromPort: {{ port }}
          ToPort: {{ port }}
          IpProtocol: tcp
      {% endfor %}
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: -1
          ToPort: -1
          IpProtocol: "-1"
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
  {% endif %}
  Ec2Instance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          SetupCfn:
            - cfn_hup_service
          SetupVolume:
            - tag_volume
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init.
        cfn_hup_service:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Ec2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Ec2Instance --configsets SetupCfn,SetupVolume --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /lib/systemd/system/cfn-hup.service:
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon

                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always

                [Install]
                WantedBy=multi-user.target
              mode: "000400"
              owner: root
              group: root
          commands:
            01_enable_cfn-hup:
              command: "/bin/systemctl enable cfn-hup.service"
            02_start_cfn-hup:
              command: "/bin/systemctl start cfn-hup.service"
        tag_volume:
          commands:
            01_tag_root_disk:
              command: !Join
                - ''
                - - "EC2_INSTANCE_ID=$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id) "
                  - "ROOT_DISK_ID=$(/usr/bin/aws ec2 describe-volumes --region $AWS_REGION "
                  - "--filters Name=attachment.instance-id,Values=$EC2_INSTANCE_ID "
                  - "--query Volumes[].VolumeId --out text); "
                  - "/usr/bin/aws ec2 create-tags --region $AWS_REGION --resources $ROOT_DISK_ID "
                  - "--tags Key=Name,Value=$EC2_INSTANCE_ID-root Key=cloudformation:stack-name,Value=$STACK_NAME "
                  - "Key=Department,Value=$DEPARTMENT Key=Project,Value=$PROJECT Key=OwnerEmail,Value=$OWNER_EMAIL"
              env:
                AWS_REGION: !Ref AWS::Region
                STACK_NAME: !Ref AWS::StackName
                DEPARTMENT: !Ref Department
                PROJECT: !Ref Project
                OWNER_EMAIL: !Ref OwnerEmail
    Properties:
      ImageId: !Ref AMIId
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      BlockDeviceMappings:
        -
        {% if sceptre_user_data.Distro.lower() == 'aws' %}
          DeviceName: "/dev/xvda"
        {% elif sceptre_user_data.Distro.lower() == 'ubuntu' %}
          DeviceName: "/dev/sda1"
        {% endif %}
          Ebs:
            DeleteOnTermination: true
            VolumeSize: !Ref VolumeSize
            Encrypted: !Ref EncryptVolume
      NetworkInterfaces:
        - DeleteOnTermination: true
          DeviceIndex: "0"
          GroupSet:
            - !ImportValue
              'Fn::Sub': '${AWS::Region}-${VpcName}-VpnSecurityGroup'
          {% if sceptre_user_data.OpenPorts is defined %}
            - !GetAtt InstanceSecurityGroup.GroupId
          {% endif %}
          SubnetId: !ImportValue
            'Fn::Sub': '${AWS::Region}-${VpcName}-${VpcSubnet}'
      IamInstanceProfile: !Ref TagRootVolumeProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Ec2Instance --configsets SetupCfn,SetupVolume --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Ec2Instance --region ${AWS::Region}
      Tags:
        - Key: "Name"
          Value: !Ref 'AWS::StackName'
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
    CreationPolicy:
      ResourceSignal:
      {% if sceptre_user_data.Distro.lower() == 'ubuntu' %}
        Timeout: PT10M
      {% else %}
        Timeout: PT5M
      {% endif %}
Outputs:
  Ec2InstanceId:
    Value: !Ref Ec2Instance
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-Ec2InstanceId'
  Ec2InstancePrivateIp:
    Value: !GetAtt Ec2Instance.PrivateIp
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-Ec2InstancePrivateIp'
  Ec2InstancePublicIp:
    Condition: PublicEc2Resources
    Value: !GetAtt Ec2Instance.PublicIp
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-Ec2InstancePublicIp'
  OwnerEmail:
    Value: !Ref OwnerEmail
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-OwnerEmail'
